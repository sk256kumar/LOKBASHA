import os
import streamlit as st
import google.generativeai as genai
from dotenv import load_dotenv
from langchain_core.messages import AIMessage, HumanMessage
from functools import lru_cache
import time
import re
from typing import Optional, List
from utils import initialize_session_state, apply_language_styles, save_user_preferences, get_user_preferences

# Constants
MAX_LINKS = 5
RESPONSE_TIMEOUT = 30
MIN_RESPONSE_LENGTH = 80  # Adjusted for Malayalam text

class MalayalamChatBot:
    """Malayalam language chatbot with optimized performance and error handling"""
    
    def __init__(self):
        self._model = None
        self._initialize_environment()
    
    def _initialize_environment(self):
        """Initialize environment variables and session state"""
        load_dotenv()
        initialize_session_state()
        apply_language_styles('Malayalam')
    
    @st.cache_resource
    def get_model_config(_self):
        """Get cached model configuration"""
        return {
            "temperature": 0.1,
            "top_p": 0.8,
            "top_k": 40,
            "max_output_tokens": 1500,  # Increased for better responses
            "stop_sequences": ["---‡¥Ö‡¥µ‡¥∏‡¥æ‡¥®‡¥Ç---"]  # Add stop sequence for better control
        }
    
    @st.cache_resource
    def get_model(_self):
        """Get cached model instance with error handling"""
        try:
            genai_api_key = os.getenv("GOOGLE_API_KEY")
            if not genai_api_key:
                raise ValueError("‚ùå Google API key ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥æ‡µª ‡¥ï‡¥¥‡¥ø‡¥û‡µç‡¥û‡¥ø‡¥≤‡µç‡¥≤. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø environment variables ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.")
            
            genai.configure(api_key=genai_api_key)
            
            system_instruction = """‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥í‡¥∞‡µÅ ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ï‡¥∞‡¥µ‡µÅ‡¥Ç ‡¥®‡¥®‡µç‡¥®‡¥æ‡¥Ø‡¥ø ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç ‡¥∏‡¥Ç‡¥∏‡¥æ‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µÅ‡¥Æ‡¥æ‡¥Ø AI ‡¥Ö‡¥∏‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥®‡µç‡¥±‡¥æ‡¥£‡µç.

‡¥ï‡µº‡¥∂‡¥®‡¥Æ‡¥æ‡¥Ø ‡¥Æ‡¥æ‡µº‡¥ó‡µç‡¥ó‡¥®‡¥ø‡µº‡¥¶‡µç‡¥¶‡µá‡¥∂‡¥ô‡µç‡¥ô‡µæ:
1. ‡¥é‡¥≤‡µç‡¥≤‡¥æ‡¥Ø‡µç‡¥™‡µç‡¥™‡µã‡¥¥‡µÅ‡¥Ç ‡¥∏‡µç‡¥µ‡¥æ‡¥≠‡¥æ‡¥µ‡¥ø‡¥ï‡¥µ‡µÅ‡¥Ç ‡¥™‡µç‡¥∞‡¥µ‡¥æ‡¥π‡¥Æ‡µÅ‡¥≥‡µç‡¥≥‡¥§‡µÅ‡¥Æ‡¥æ‡¥Ø ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Ç ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï
2. ‡¥∂‡¥∞‡¥ø‡¥Ø‡¥æ‡¥Ø ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç ‡¥µ‡µç‡¥Ø‡¥æ‡¥ï‡¥∞‡¥£‡¥µ‡µÅ‡¥Ç ‡¥™‡µç‡¥∞‡µä‡¥´‡¥∑‡¥£‡µΩ ‡¥∂‡¥¨‡µç‡¥¶‡¥æ‡¥µ‡¥≤‡¥ø‡¥Ø‡µÅ‡¥Ç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï
3. ‡¥µ‡¥ø‡¥∂‡¥¶‡¥Æ‡¥æ‡¥Ø‡¥§‡µÅ‡¥Ç ‡¥µ‡¥ø‡¥µ‡¥∞‡¥™‡µç‡¥∞‡¥¶‡¥µ‡µÅ‡¥Æ‡¥æ‡¥Ø ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï (‡¥ï‡µÅ‡¥±‡¥û‡µç‡¥û‡¥§‡µç 80 ‡¥µ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡µæ)
4. ‡¥µ‡µç‡¥Ø‡¥ï‡µç‡¥§‡¥Æ‡¥æ‡¥Ø ‡¥ñ‡¥£‡µç‡¥°‡¥ø‡¥ï‡¥ï‡¥≥‡µã‡¥ü‡µÜ ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥Ç ‡¥ï‡µç‡¥∞‡¥Æ‡µÄ‡¥ï‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï
5. ‡¥∏‡¥æ‡¥ß‡µç‡¥Ø‡¥Æ‡¥æ‡¥ï‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥ï‡µÉ‡¥§‡µç‡¥Ø‡¥µ‡µÅ‡¥Ç ‡¥µ‡¥ø‡¥∂‡µç‡¥µ‡¥∏‡¥®‡µÄ‡¥Ø‡¥µ‡µÅ‡¥Æ‡¥æ‡¥Ø ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï
6. ‡¥Ü‡¥µ‡µº‡¥§‡µç‡¥§‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥® ‡¥µ‡¥æ‡¥ï‡µç‡¥Ø‡¥ô‡µç‡¥ô‡¥≥‡µã ‡¥®‡¥ø‡¥±‡¥ö‡µç‡¥ö ‡¥â‡¥≥‡µç‡¥≥‡¥ü‡¥ï‡µç‡¥ï‡¥Æ‡µã ‡¥í‡¥¥‡¥ø‡¥µ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï
7. ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥§‡µç‡¥§‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥∏‡¥ô‡µç‡¥ï‡µÄ‡µº‡¥£‡µç‡¥£‡¥§‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µç ‡¥Ö‡¥®‡µÅ‡¥Ø‡µã‡¥ú‡µç‡¥Ø‡¥Æ‡¥æ‡¥Ø ‡¥∏‡µç‡¥µ‡¥∞‡¥Ç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï
8. ‡¥µ‡¥∏‡µç‡¥§‡µÅ‡¥§‡¥æ‡¥™‡¥∞‡¥Æ‡¥æ‡¥Ø ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥∏‡¥®‡µç‡¥¶‡µº‡¥≠‡¥µ‡µÅ‡¥Ç ‡¥™‡¥∂‡µç‡¥ö‡¥æ‡¥§‡µç‡¥§‡¥≤‡¥µ‡µÅ‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï
9. ‡¥Ö‡¥®‡¥æ‡¥µ‡¥∂‡µç‡¥Ø‡¥Æ‡¥æ‡¥Ø ‡¥Ö‡¥µ‡¥∏‡¥æ‡¥®‡¥µ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡µæ ‡¥á‡¥≤‡µç‡Æ≤‡¥æ‡¥§‡µÜ ‡¥∏‡µç‡¥µ‡¥æ‡¥≠‡¥æ‡¥µ‡¥ø‡¥ï‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥Ç ‡¥Ö‡¥µ‡¥∏‡¥æ‡¥®‡¥ø‡¥™‡µç‡¥™‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï
10. ‡¥Ü‡¥µ‡¥∂‡µç‡¥Ø‡¥Æ‡¥ø‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥á‡¥Ç‡¥ó‡µç‡¥≤‡µÄ‡¥∑‡µç ‡¥µ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡µæ ‡¥í‡¥¥‡¥ø‡¥µ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï"""

            return genai.GenerativeModel(
                model_name="gemini-2.0-flash",
                generation_config=_self.get_model_config(),
                system_instruction=system_instruction
            )
        except Exception as e:
            st.error(f"‚ùå ‡¥Æ‡µã‡¥°‡µΩ initialization ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ: {str(e)}")
            return None
    
    @lru_cache(maxsize=32)
    def _extract_domain(self, url: str) -> Optional[str]:
        """Extract domain from URL with caching"""
        try:
            domain_match = re.search(r'https?://(?:www\.)?([^/]+)', url)
            return domain_match.group(1) if domain_match else None
        except:
            return None
    
    def extract_links(self, text: str) -> Optional[str]:
        """Extract and format valid URLs from response text"""
        try:
            # Clean existing link sections
            cleaned_text = re.sub(r'\n\n(‡¥¨‡¥®‡µç‡¥ß‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü|‡¥µ‡¥ø‡¥∂‡µç‡¥µ‡¥∏‡¥®‡µÄ‡¥Ø‡¥Æ‡¥æ‡¥Ø) ‡¥≤‡¥ø‡¥ô‡µç‡¥ï‡µÅ‡¥ï‡µæ:.*$', '', text, flags=re.DOTALL)
            cleaned_text = re.sub(r'\[([^\]]+)\]\(([^)]+)\)', r'\2', cleaned_text)
            
            # Extract URLs
            url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
            urls = re.findall(url_pattern, cleaned_text)
            
            if not urls:
                return None
            
            # Process and deduplicate URLs
            valid_urls = []
            seen_domains = set()
            
            for url in urls[:MAX_LINKS * 2]:  # Process more to get better selection
                # Clean URL
                clean_url = url.strip('()[].,!?').rstrip('.')
                
                # Validate URL format
                if not re.match(r'https?://[^/]*\.[^/]+', clean_url):
                    continue
                
                domain = self._extract_domain(clean_url)
                if domain and domain not in seen_domains:
                    seen_domains.add(domain)
                    valid_urls.append(clean_url)
                    
                    if len(valid_urls) >= MAX_LINKS:
                        break
            
            if not valid_urls:
                return None
            
            # Format links
            formatted_links = "\n\n---\n\nüîó **‡¥¨‡¥®‡µç‡¥ß‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥≤‡¥ø‡¥ô‡µç‡¥ï‡µÅ‡¥ï‡µæ:**\n\n"
            for url in valid_urls:
                domain = self._extract_domain(url)
                if domain:
                    display_name = domain.replace('www.', '')
                    formatted_links += f"‚Ä¢ [{display_name}]({url})\n"
            
            return formatted_links.rstrip()
            
        except Exception as e:
            st.warning(f"‚ö†Ô∏è ‡¥≤‡¥ø‡¥ô‡µç‡¥ï‡µç extraction ‡¥™‡¥ø‡¥∂‡¥ï‡µç: {str(e)}")
            return None
    
    def _create_optimized_prompt(self, question: str) -> str:
        """Create an optimized prompt for better responses"""
        return f"""‡¥à ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥§‡µç‡¥§‡¥ø‡¥®‡µç ‡¥∏‡¥Æ‡¥ó‡µç‡¥∞‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï:

{question}

‡¥Ü‡¥µ‡¥∂‡µç‡¥Ø‡¥ï‡¥§‡¥ï‡µæ:
- ‡¥µ‡¥ø‡¥∂‡¥¶‡¥µ‡µÅ‡¥Ç ‡¥®‡¥®‡µç‡¥®‡¥æ‡¥Ø‡¥ø ‡¥ï‡µç‡¥∞‡¥Æ‡µÄ‡¥ï‡¥∞‡¥ø‡¥ö‡µç‡¥ö‡¥§‡µÅ‡¥Æ‡¥æ‡¥Ø ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï (‡¥ï‡µÅ‡¥±‡¥û‡µç‡¥û‡¥§‡µç 80 ‡¥µ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡µæ)
- ‡¥µ‡µç‡¥Ø‡¥ï‡µç‡¥§‡¥Æ‡¥æ‡¥Ø ‡¥ñ‡¥£‡µç‡¥°‡¥ø‡¥ï‡¥ï‡¥≥‡µÅ‡¥Ç ‡¥≤‡µã‡¥ú‡¥ø‡¥ï‡µç‡¥ï‡µΩ ‡¥´‡µç‡¥≤‡µã‡¥Ø‡µÅ‡¥Ç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï
- ‡¥™‡µç‡¥∞‡¥∏‡¥ï‡µç‡¥§‡¥Æ‡¥æ‡¥Ø ‡¥∏‡¥®‡µç‡¥¶‡µº‡¥≠‡¥µ‡µÅ‡¥Ç ‡¥™‡¥∂‡µç‡¥ö‡¥æ‡¥§‡µç‡¥§‡¥≤ ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥Ç ‡¥â‡µæ‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡µÅ‡¥ï
- ‡¥Ü‡¥µ‡¥∂‡µç‡¥Ø‡¥Æ‡µÅ‡¥≥‡µç‡¥≥‡¥ø‡¥ü‡¥§‡µç‡¥§‡µç ‡¥®‡¥ø‡µº‡¥¶‡µç‡¥¶‡¥ø‡¥∑‡µç‡¥ü ‡¥µ‡¥∏‡µç‡¥§‡µÅ‡¥§‡¥ï‡¥≥‡µÅ‡¥Ç ‡¥â‡¥¶‡¥æ‡¥π‡¥∞‡¥£‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥Ç ‡¥â‡¥¶‡µç‡¥ß‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï
- ‡¥™‡µç‡¥∞‡µä‡¥´‡¥∑‡¥£‡µΩ ‡¥é‡¥®‡µç‡¥®‡¥æ‡µΩ ‡¥∏‡¥Ç‡¥≠‡¥æ‡¥∑‡¥£‡¥æ‡¥§‡µç‡¥Æ‡¥ï‡¥Æ‡¥æ‡¥Ø ‡¥∏‡µç‡¥µ‡¥∞‡¥Ç ‡¥®‡¥ø‡¥≤‡¥®‡¥ø‡µº‡¥§‡µç‡¥§‡µÅ‡¥ï
- ‡¥ï‡µÉ‡¥§‡µç‡¥Ø‡¥§‡¥Ø‡¥ø‡¥≤‡µÅ‡¥Ç ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ï‡¥∞‡¥Æ‡¥æ‡¥Ø‡¥§‡¥ø‡¥≤‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥¶‡µç‡¥ß ‡¥ï‡µá‡¥®‡µç‡¥¶‡µç‡¥∞‡µÄ‡¥ï‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï

‡¥µ‡¥ø‡¥µ‡¥ø‡¥ß ‡¥Ü‡¥ß‡¥ø‡¥ï‡¥æ‡¥∞‡¥ø‡¥ï ‡¥â‡¥±‡¥µ‡¥ø‡¥ü‡¥ô‡µç‡¥ô‡¥≥‡¥ø‡µΩ (‡¥µ‡¥ø‡¥¶‡µç‡¥Ø‡¥æ‡¥≠‡µç‡¥Ø‡¥æ‡¥∏‡¥Ç, ‡¥∏‡µº‡¥ï‡µç‡¥ï‡¥æ‡µº, ‡¥µ‡¥æ‡µº‡¥§‡µç‡¥§, ‡¥ó‡¥µ‡µá‡¥∑‡¥£ ‡¥∏‡µç‡¥•‡¥æ‡¥™‡¥®‡¥ô‡µç‡¥ô‡µæ) ‡¥®‡¥ø‡¥®‡µç‡¥®‡µç 3-5 ‡¥µ‡¥ø‡¥∂‡µç‡¥µ‡¥∏‡¥®‡µÄ‡¥Ø‡¥Æ‡¥æ‡¥Ø ‡¥±‡¥´‡¥±‡µª‡¥∏‡µç ‡¥≤‡¥ø‡¥ô‡µç‡¥ï‡µÅ‡¥ï‡µæ ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï.
‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥§‡µç‡¥§‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥Ö‡¥µ‡¥∏‡¥æ‡¥®‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥≤‡¥ø‡¥ô‡µç‡¥ï‡µÅ‡¥ï‡µæ ‡¥∏‡¥æ‡¥ß‡¥æ‡¥∞‡¥£ URL-‡¥ï‡¥≥‡¥æ‡¥Ø‡¥ø ‡¥´‡µã‡µº‡¥Æ‡¥æ‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï."""
    
    def get_response(self, question: str) -> Optional[str]:
        """Get response from the model with error handling and optimization"""
        try:
            if not self._model:
                self._model = self.get_model()
                if not self._model:
                    return None
            
            # Initialize chat session if needed
            if "chat_session_malayalam" not in st.session_state:
                st.session_state.chat_session_malayalam = self._model.start_chat(history=[])
            
            # Create optimized prompt
            prompt = self._create_optimized_prompt(question)
            
            # Get response with timeout handling
            with st.spinner("ü§î ‡¥ö‡¥ø‡¥®‡µç‡¥§‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ..."):
                response = st.session_state.chat_session_malayalam.send_message(prompt)
                
                if not response or not response.text:
                    return "‚ö†Ô∏è ‡¥é‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥í‡¥∞‡µÅ ‡¥∂‡µÇ‡¥®‡µç‡¥Ø‡¥Æ‡¥æ‡¥Ø ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥Ç ‡¥≤‡¥≠‡¥ø‡¥ö‡µç‡¥ö‡µÅ. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥Ç ‡¥Æ‡¥±‡µç‡¥±‡µÅ‡¥µ‡¥ø‡¥ß‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï."
                
                response_text = response.text.strip()
                
                # Validate response quality
                if len(response_text) < MIN_RESPONSE_LENGTH:
                    st.warning("‚ö†Ô∏è ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥Ç ‡¥µ‡¥≥‡¥∞‡µÜ ‡¥ö‡µÜ‡¥±‡µÅ‡¥§‡¥æ‡¥Ø‡¥ø ‡¥§‡µã‡¥®‡µç‡¥®‡µÅ‡¥®‡µç‡¥®‡µÅ. ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ...")
                    return None
                
                # Extract and append links
                links = self.extract_links(response_text)
                final_response = response_text + (links if links else "")
                
                return final_response
                
        except Exception as e:
            error_msg = str(e).lower()
            if "quota" in error_msg or "limit" in error_msg:
                return "‚ö†Ô∏è API quota ‡¥ï‡¥¥‡¥ø‡¥û‡µç‡¥û‡µÅ. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥™‡¥ø‡¥®‡µç‡¥®‡µÄ‡¥ü‡µç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï."
            elif "network" in error_msg or "connection" in error_msg:
                return "‚ö†Ô∏è ‡¥®‡µÜ‡¥±‡µç‡¥±‡µç‚Äå‡¥µ‡µº‡¥ï‡µç‡¥ï‡µç ‡¥™‡¥ø‡¥∂‡¥ï‡µç ‡¥∏‡¥Ç‡¥≠‡¥µ‡¥ø‡¥ö‡µç‡¥ö‡µÅ. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ï‡¥£‡¥ï‡µç‡¥∑‡µª ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï."
            else:
                st.error(f"‚ùå ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥Ç ‡¥ú‡¥®‡¥±‡µá‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡µΩ ‡¥™‡¥ø‡¥∂‡¥ï‡µç: {str(e)}")
                return None
    
    def display_chat_history(self):
        """Display chat history with improved formatting"""
        if "chat_history_malayalam" not in st.session_state:
            st.session_state.chat_history_malayalam = [
                AIMessage(content="üëã **‡¥®‡¥Æ‡¥∏‡µç‡¥ï‡¥æ‡¥∞‡¥Ç!** ‡¥û‡¥æ‡µª ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç ‡¥Ö‡¥∏‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥®‡µç‡¥±‡¥æ‡¥£‡µç. ‡¥é‡¥®‡µç‡¥§‡µÅ‡¥Ç ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥Æ‡¥ü‡¥ø‡¥ï‡µç‡¥ï‡µá‡¥£‡µç‡¥ü!")
            ]
        
        for message in st.session_state.chat_history_malayalam:
            if isinstance(message, AIMessage):
                with st.chat_message("assistant", avatar="ü§ñ"):
                    st.markdown(message.content)
            elif isinstance(message, HumanMessage):
                with st.chat_message("user", avatar="üë§"):
                    st.markdown(message.content)
    
    def handle_user_input(self):
        """Handle user input with validation and processing"""
        user_query = st.chat_input(
            "üí¨ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥Ç ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥á‡¥µ‡¥ø‡¥ü‡µÜ ‡¥ü‡µà‡¥™‡µç‡¥™‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÇ...", 
            key="malayalam_chat_input",
            max_chars=1000
        )
        
        if user_query and user_query.strip():
            # Validate input
            cleaned_query = user_query.strip()
            if len(cleaned_query) < 3:
                st.warning("‚ö†Ô∏è ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥ï‡µÇ‡¥ü‡µÅ‡¥§‡µΩ ‡¥µ‡¥ø‡¥∂‡¥¶‡¥Æ‡¥æ‡¥Ø ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥Ç ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.")
                return
            
            # Record start time for performance tracking
            start_time = time.time()
            
            # Add user message to history
            st.session_state.chat_history_malayalam.append(HumanMessage(content=cleaned_query))
            
            # Display user message
            with st.chat_message("user", avatar="üë§"):
                st.markdown(cleaned_query)
            
            # Generate and display response
            with st.chat_message("assistant", avatar="ü§ñ"):
                result = self.get_response(cleaned_query)
                
                if result:
                    st.markdown(result)
                    st.session_state.chat_history_malayalam.append(AIMessage(content=result))
                    
                    # Show performance metrics
                    response_time = time.time() - start_time
                    if response_time > 0:
                        st.sidebar.success(f"‚ö° ‡¥™‡µç‡¥∞‡¥§‡¥ø‡¥ï‡¥∞‡¥£ ‡¥∏‡¥Æ‡¥Ø‡¥Ç: {response_time:.2f}s")
                else:
                    error_msg = "üòî ‡¥é‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥Ç ‡¥ú‡¥®‡¥±‡µá‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡µΩ ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Æ‡µÅ‡¥£‡µç‡¥ü‡µç. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥Ç ‡¥Æ‡¥±‡µç‡¥±‡µÅ‡¥µ‡¥ø‡¥ß‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡¥Ø‡µã ‡¥™‡¥ø‡¥®‡µç‡¥®‡µÄ‡¥ü‡µç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡¥Ø‡µã ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï."
                    st.error(error_msg)
                    st.session_state.chat_history_malayalam.append(AIMessage(content=error_msg))
    
    def run_chat_interface(self):
        """Main chat interface"""
        try:
            self.display_chat_history()
            self.handle_user_input()
            
        except Exception as e:
            st.error(f"‚ùå ‡¥ö‡¥æ‡¥±‡µç‡¥±‡µç ‡¥á‡¥®‡µç‡¥±‡µº‡¥´‡µá‡¥∏‡µç ‡¥™‡¥ø‡¥∂‡¥ï‡µç: {str(e)}")
            st.info("üîÑ ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥™‡µá‡¥ú‡µç ‡¥±‡¥ø‡¥´‡µç‡¥∞‡¥∑‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡µç ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.")

def main():
    """Main function that respects the st.flag dependency"""
    
    # Check authentication flag
    if not hasattr(st, 'flag') or not st.flag:
        st.error("üîí **‡¥™‡µç‡¥∞‡¥µ‡µá‡¥∂‡¥®‡¥Ç ‡¥®‡¥ø‡¥∑‡µá‡¥ß‡¥ø‡¥ö‡µç‡¥ö‡µÅ**: ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç ‡¥Æ‡µä‡¥°‡µç‡¥Ø‡µÇ‡µæ ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥≤‡µã‡¥ó‡¥ø‡µª ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.")
        st.info("üëà ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥Ö‡¥ï‡µç‡¥ï‡µó‡¥£‡µç‡¥ü‡¥ø‡¥≤‡µá‡¥ï‡µç‡¥ï‡µç ‡¥≤‡µã‡¥ó‡¥ø‡µª ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡µª ‡¥∏‡µà‡¥°‡µç‡¥¨‡¥æ‡µº ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.")
        return
    
    # Page configuration
    st.markdown("""
    <style>
    .main-header {
        background: linear-gradient(90deg, #1e3c72 0%, #2a5298 100%);
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
    }
    .main-header h1 {
        color: white;
        margin: 0;
        text-align: center;
    }
    .chat-container {
        max-height: 600px;
        overflow-y: auto;
    }
    .malayalam-text {
        font-family: 'Noto Sans Malayalam', 'Kartika', 'Rachana', sans-serif;
        line-height: 1.6;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø ‡¥ö‡¥æ‡¥±‡µç‡¥±‡µç‡¥¨‡µã‡¥ü‡µç‡¥ü‡µç</h1>
    </div>
    """, unsafe_allow_html=True)
    
    # Initialize and run chatbot
    try:
        chatbot = MalayalamChatBot()
        
       
        
        # Main chat interface
        chatbot.run_chat_interface()
        
        # Footer
        st.markdown("---")
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.markdown(
                "<p style='text-align: center; color: #666;' class='malayalam-text'>‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç ‡¥≠‡¥æ‡¥∑‡¥æ ‡¥™‡¥ø‡¥®‡µç‡¥§‡µÅ‡¥£‡¥Ø‡µç‡¥ï‡µç‡¥ï‡¥æ‡¥Ø‡¥ø ‚ù§Ô∏è ‡¥ì‡¥ü‡µÜ ‡¥®‡¥ø‡µº‡¥Æ‡µç‡¥Æ‡¥ø‡¥ö‡µç‡¥ö‡¥§‡µç</p>", 
                unsafe_allow_html=True
            )
            
    except Exception as e:
        st.error(f"‚ùå **‡¥Ü‡¥™‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µá‡¥∑‡µª ‡¥™‡¥ø‡¥∂‡¥ï‡µç**: {str(e)}")
        st.info("üîÑ ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥™‡µá‡¥ú‡µç ‡¥±‡¥ø‡¥´‡µç‡¥∞‡¥∑‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï. ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Ç ‡¥§‡µÅ‡¥ü‡¥∞‡µÅ‡¥ï‡¥Ø‡¥æ‡¥£‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ, ‡¥∏‡¥™‡µç‡¥™‡µã‡µº‡¥ü‡µç‡¥ü‡¥ø‡¥®‡µÜ ‡¥¨‡¥®‡µç‡¥ß‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥ï.")

if __name__ == "__main__":
    main()