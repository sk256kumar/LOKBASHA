import os
import streamlit as st
import google.generativeai as genai
from dotenv import load_dotenv
from langchain_core.messages import AIMessage, HumanMessage
from deep_translator import GoogleTranslator
from functools import lru_cache
import time
import re
from typing import Optional, List
from utils import initialize_session_state, apply_language_styles, save_user_preferences, get_user_preferences

# Constants
MAX_LINKS = 5
RESPONSE_TIMEOUT = 30
MIN_RESPONSE_LENGTH = 150  # Telugu text tends to be longer

class TeluguChatBot:
    """Telugu language chatbot with optimized performance and error handling"""
    
    def __init__(self):
        self._model = None
        self._translator_cache = {}
        self._initialize_environment()
    
    def _initialize_environment(self):
        """Initialize environment variables and session state"""
        load_dotenv()
        initialize_session_state()
        apply_language_styles('Telugu')
    
    @st.cache_resource
    def get_model_config(_self):
        """Get cached model configuration"""
        return {
            "temperature": 0.1,
            "top_p": 0.8,
            "top_k": 40,
            "max_output_tokens": 1800,  # Increased for Telugu responses
            "stop_sequences": ["---END---"]
        }
    
    @st.cache_resource
    def get_model(_self):
        """Get cached model instance with error handling"""
        try:
            genai_api_key = os.getenv("GOOGLE_API_KEY")
            if not genai_api_key:
                raise ValueError("‚ùå Google API key ‡∞≤‡±á‡∞¶‡±Å. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø environment variables ‡∞ö‡±Ç‡∞°‡∞Ç‡∞°‡∞ø.")
            
            genai.configure(api_key=genai_api_key)
            
            system_instruction = """‡∞Æ‡±Ä‡∞∞‡±Å ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞≠‡∞æ‡∞∑‡∞≤‡±ã ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡±á ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞≤‡±Å. ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞à ‡∞®‡∞ø‡∞Ø‡∞Æ‡∞æ‡∞≤‡∞®‡±Å ‡∞ï‡∞†‡∞ø‡∞®‡∞Ç‡∞ó‡∞æ ‡∞™‡∞æ‡∞ü‡∞ø‡∞Ç‡∞ö‡∞æ‡∞≤‡∞ø:

‡∞ï‡∞†‡∞ø‡∞® ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ó‡∞¶‡∞∞‡±ç‡∞∂‡∞ï‡∞æ‡∞≤‡±Å:
1. ‡∞é‡∞≤‡±ç‡∞≤‡∞™‡±ç‡∞™‡±Å‡∞°‡±Ç ‡∞∏‡∞π‡∞ú‡∞Æ‡±à‡∞®, ‡∞∏‡±ç‡∞µ‡∞æ‡∞≠‡∞æ‡∞µ‡∞ø‡∞ï ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å‡∞≤‡±ã ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø
2. ‡∞∏‡∞∞‡±à‡∞® ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ï‡∞∞‡∞£‡∞Ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞µ‡±É‡∞§‡±ç‡∞§‡∞ø‡∞™‡∞∞‡∞Æ‡±à‡∞® ‡∞™‡∞¶‡∞ú‡∞æ‡∞≤‡∞Ç ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø
3. ‡∞µ‡∞ø‡∞µ‡∞∞‡∞Ç‡∞ó‡∞æ, ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞æ‡∞§‡±ç‡∞Æ‡∞ï ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞æ‡∞≤‡±Å ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø (‡∞ï‡∞®‡±Ä‡∞∏‡∞Ç 150 ‡∞™‡∞¶‡∞æ‡∞≤‡±Å)
4. ‡∞∏‡±ç‡∞™‡∞∑‡±ç‡∞ü‡∞Æ‡±à‡∞® ‡∞™‡±á‡∞∞‡∞æ‡∞ó‡±ç‡∞∞‡∞æ‡∞´‡±ç‚Äå‡∞≤‡∞§‡±ã ‡∞Æ‡±Ä ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞®‡∞ø‡∞∞‡±ç‡∞Æ‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø
5. ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Æ‡±à‡∞®‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞µ‡∞ø‡∞∂‡±ç‡∞µ‡∞∏‡∞®‡±Ä‡∞Ø ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞â‡∞¶‡∞π‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø
6. ‡∞™‡±Å‡∞®‡∞∞‡∞æ‡∞µ‡±É‡∞§ ‡∞™‡∞¶‡∞æ‡∞≤‡±Å ‡∞≤‡±á‡∞¶‡∞æ ‡∞Ö‡∞®‡∞µ‡∞∏‡∞∞ ‡∞ï‡∞Ç‡∞ü‡±Ü‡∞Ç‡∞ü‡±ç‚Äå‡∞®‡±Å ‡∞®‡∞ø‡∞µ‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø
7. ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞® ‡∞∏‡∞Ç‡∞ï‡±ç‡∞≤‡∞ø‡∞∑‡±ç‡∞ü‡∞§ ‡∞Ü‡∞ß‡∞æ‡∞∞‡∞Ç‡∞ó‡∞æ ‡∞§‡∞ó‡∞ø‡∞® ‡∞∏‡±ç‡∞µ‡¥∞‡∞Ç ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø
8. ‡∞µ‡∞æ‡∞∏‡±ç‡∞§‡∞µ‡∞ø‡∞ï ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞≤‡∞ï‡±Å, ‡∞∏‡∞Ç‡∞¶‡∞∞‡±ç‡∞≠‡∞Ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞®‡±á‡∞™‡∞•‡±ç‡∞Ø ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞Ö‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø
9. ‡∞Ö‡∞®‡∞µ‡∞∏‡∞∞ ‡∞Æ‡±Å‡∞ó‡∞ø‡∞Ç‡∞™‡±Å‡∞≤‡±Å ‡∞≤‡±á‡∞ï‡±Å‡∞Ç‡∞°‡∞æ ‡∞∏‡∞π‡∞ú‡∞Ç‡∞ó‡∞æ ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞æ‡∞≤‡∞®‡±Å ‡∞Æ‡±Å‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø
10. ‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó‡∞¶‡∞æ‡∞∞‡±Å‡∞≤‡∞®‡±Å ‡∞∏‡∞Ç‡∞¨‡±ã‡∞ß‡∞ø‡∞Ç‡∞ö‡±á‡∞ü‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞§‡∞ó‡∞ø‡∞® ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞ó‡±å‡∞∞‡∞µ ‡∞™‡∞¶‡∞æ‡∞≤‡±Å (‡∞Æ‡±Ä‡∞∞‡±Å) ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø"""

            return genai.GenerativeModel(
                model_name="gemini-2.0-flash",
                generation_config=_self.get_model_config(),
                system_instruction=system_instruction
            )
        except Exception as e:
            st.error(f"‚ùå Model initialization ‡∞µ‡∞ø‡∞´‡∞≤‡∞Æ‡±à‡∞Ç‡∞¶‡∞ø: {str(e)}")
            return None
    
    @lru_cache(maxsize=32)
    def get_translator(self, src: str, dest: str) -> Optional[GoogleTranslator]:
        """Get cached translator instance"""
        try:
            return GoogleTranslator(source=src, target=dest)
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Translator initialization error: {str(e)}")
            return None
    
    def translate_text(self, text: str, src: str, dest: str) -> Optional[str]:
        """Translate text with error handling and caching"""
        try:
            translator = self.get_translator(src, dest)
            if translator:
                return translator.translate(text)
            return None
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Translation error: {str(e)}")
            return None
    
    def clean_repeated_text(self, text: str) -> str:
        """Remove repeated words and phrases from Telugu text"""
        try:
            # Split text into words
            words = text.split()
            
            # Remove consecutive repeated words
            cleaned_words = []
            for i, word in enumerate(words):
                if i == 0 or word != words[i-1]:
                    cleaned_words.append(word)
            
            # Remove repeated phrases (up to 3 words)
            final_words = []
            for i in range(len(cleaned_words)):
                # Check for 2-word repetition
                if i >= 2 and cleaned_words[i-1:i+1] == cleaned_words[i-3:i-1]:
                    continue
                # Check for 3-word repetition
                if i >= 4 and cleaned_words[i-2:i+1] == cleaned_words[i-5:i-2]:
                    continue
                final_words.append(cleaned_words[i])
            
            return ' '.join(final_words)
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Text cleaning error: {str(e)}")
            return text
    
    @lru_cache(maxsize=32)
    def _extract_domain(self, url: str) -> Optional[str]:
        """Extract domain from URL with caching"""
        try:
            domain_match = re.search(r'https?://(?:www\.)?([^/]+)', url)
            return domain_match.group(1) if domain_match else None
        except:
            return None
    
    def extract_links(self, text: str) -> Optional[str]:
        """Extract and format valid URLs from response text"""
        try:
            # Clean existing link sections
            text = re.sub(r'\n\n‡∞∏‡∞Ç‡∞¨‡∞Ç‡∞ß‡∞ø‡∞§ ‡∞≤‡∞ø‡∞Ç‡∞ï‡±ç‚Äå‡∞≤‡±Å:.*$', '', text, flags=re.DOTALL)
            text = re.sub(r'\n\n‡∞µ‡∞ø‡∞∂‡±ç‡∞µ‡∞∏‡∞®‡±Ä‡∞Ø ‡∞≤‡∞ø‡∞Ç‡∞ï‡±ç‚Äå‡∞≤‡±Å:.*$', '', text, flags=re.DOTALL)
            
            # Clean up markdown-formatted links
            text = re.sub(r'\[([^\]]+)\]\(([^)]+)\)', r'\2', text)
            text = re.sub(r'\d+\.\s*https?://[^\s]+', '', text)
            
            # Extract URLs
            url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
            urls = re.findall(url_pattern, text)
            
            if not urls:
                return None
            
            # Process and deduplicate URLs
            valid_urls = []
            seen_domains = set()
            
            for url in urls[:MAX_LINKS * 2]:
                # Clean URL
                clean_url = url.strip('()[].,!?').rstrip('.')
                clean_url = re.sub(r'\s*\d+\.?$', '', clean_url)
                
                # Validate URL format
                if not re.match(r'https?://[^/]*\.[^/]+', clean_url):
                    continue
                
                domain = self._extract_domain(clean_url)
                if domain and domain not in seen_domains:
                    seen_domains.add(domain)
                    valid_urls.append(clean_url)
                    
                    if len(valid_urls) >= MAX_LINKS:
                        break
            
            if not valid_urls:
                return None
            
            # Format links
            formatted_links = "\n\n---\n\nüîó **‡∞∏‡∞Ç‡∞¨‡∞Ç‡∞ß‡∞ø‡∞§ ‡∞µ‡∞®‡∞∞‡±Å‡∞≤‡±Å:**\n\n"
            for url in valid_urls:
                domain = self._extract_domain(url)
                if domain:
                    display_name = domain.replace('www.', '')
                    formatted_links += f"‚Ä¢ [{display_name}]({url})\n"
            
            return formatted_links.rstrip()
            
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Link extraction error: {str(e)}")
            return None
    
    def _create_optimized_prompt(self, question: str) -> str:
        """Create an optimized prompt for better Telugu responses"""
        return f"""‡∞à ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞ï‡±Å ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å‡∞≤‡±ã ‡∞∏‡∞Æ‡∞ó‡±ç‡∞∞‡∞Æ‡±à‡∞® ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø:

{question}

‡∞Ö‡∞µ‡∞∏‡∞∞‡∞æ‡∞≤‡±Å:
- ‡∞µ‡∞ø‡∞µ‡∞∞‡∞£‡∞æ‡∞§‡±ç‡∞Æ‡∞ï, ‡∞¨‡∞æ‡∞ó‡∞æ ‡∞®‡∞ø‡∞∞‡±ç‡∞Æ‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø (‡∞ï‡∞®‡±Ä‡∞∏‡∞Ç 150 ‡∞™‡∞¶‡∞æ‡∞≤‡±Å)
- ‡∞∏‡±ç‡∞™‡∞∑‡±ç‡∞ü‡∞Æ‡±à‡∞® ‡∞™‡±á‡∞∞‡∞æ‡∞ó‡±ç‡∞∞‡∞æ‡∞´‡±ç‚Äå‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞≤‡∞æ‡∞ú‡∞ø‡∞ï‡∞≤‡±ç ‡∞´‡±ç‡∞≤‡±ã‡∞®‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø
- ‡∞∏‡∞Ç‡∞¨‡∞Ç‡∞ß‡∞ø‡∞§ ‡∞∏‡∞Ç‡∞¶‡∞∞‡±ç‡∞≠‡∞Ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞®‡±á‡∞™‡∞•‡±ç‡∞Ø ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞ö‡±á‡∞∞‡±ç‡∞ö‡∞Ç‡∞°‡∞ø
- ‡∞§‡∞ó‡∞ø‡∞® ‡∞ö‡±ã‡∞ü ‡∞®‡∞ø‡∞∞‡±ç‡∞¶‡∞ø‡∞∑‡±ç‡∞ü ‡∞µ‡∞æ‡∞∏‡±ç‡∞§‡∞µ‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£‡∞≤‡∞®‡±Å ‡∞â‡∞¶‡∞π‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø
- ‡∞µ‡±É‡∞§‡±ç‡∞§‡∞ø‡∞™‡∞∞‡∞Æ‡±à‡∞® ‡∞ï‡∞æ‡∞®‡±Ä ‡∞∏‡∞Ç‡∞≠‡∞æ‡∞∑‡∞£‡∞æ‡∞§‡±ç‡∞Æ‡∞ï ‡∞∏‡±ç‡∞µ‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞ï‡±ä‡∞®‡∞∏‡∞æ‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø
- ‡∞ñ‡∞ö‡±ç‡∞ö‡∞ø‡∞§‡∞§‡±ç‡∞µ‡∞Ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡∞æ‡∞∞‡∞ø‡∞§‡±ç‡∞µ‡∞Ç‡∞™‡±à ‡∞¶‡±É‡∞∑‡±ç‡∞ü‡∞ø ‡∞™‡±Ü‡∞ü‡±ç‡∞ü‡∞Ç‡∞°‡∞ø

‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞µ‡±á‡∞∞‡±ç‡∞µ‡±á‡∞∞‡±Å ‡∞Ö‡∞ß‡∞ø‡∞ï‡∞æ‡∞∞‡∞ø‡∞ï ‡∞Æ‡±Ç‡∞≤‡∞æ‡∞ß‡∞æ‡∞∞‡∞æ‡∞≤ ‡∞®‡±Å‡∞Ç‡∞°‡∞ø (‡∞µ‡∞ø‡∞¶‡±ç‡∞Ø‡∞æ, ‡∞™‡±ç‡∞∞‡∞≠‡±Å‡∞§‡±ç‡∞µ, ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å, ‡∞™‡∞∞‡∞ø‡∞∂‡±ã‡∞ß‡∞®‡∞æ ‡∞∏‡∞Ç‡∞∏‡±ç‡∞•‡∞≤‡±Å).
‡∞Æ‡±Ä ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞ö‡∞ø‡∞µ‡∞∞‡∞ø‡∞≤‡±ã ‡∞≤‡∞ø‡∞Ç‡∞ï‡±ç‚Äå‡∞≤‡∞®‡±Å ‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£ URL‡∞≤‡±Å‡∞ó‡∞æ ‡∞´‡∞æ‡∞∞‡±ç‡∞Æ‡∞æ‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø."""
    
    def get_direct_telugu_response(self, question: str) -> Optional[str]:
        """Get response directly in Telugu with error handling and optimization"""
        try:
            if not self._model:
                self._model = self.get_model()
                if not self._model:
                    return None
            
            # Initialize chat session if needed
            if "chat_session_telugu" not in st.session_state:
                st.session_state.chat_session_telugu = self._model.start_chat(history=[])
            
            # Create optimized prompt
            prompt = self._create_optimized_prompt(question)
            
            # Get response with timeout handling
            with st.spinner("ü§î ‡∞Ü‡∞≤‡±ã‡∞ö‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å..."):
                response = st.session_state.chat_session_telugu.send_message(prompt)
                
                if not response or not response.text:
                    return "‚ö†Ô∏è ‡∞ñ‡∞æ‡∞≤‡±Ä ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞µ‡∞ö‡±ç‡∞ö‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞®‡±Å ‡∞Æ‡∞∞‡±ã‡∞µ‡∞ø‡∞ß‡∞Ç‡∞ó‡∞æ ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø."
                
                response_text = response.text.strip()
                
                # Clean repeated text
                cleaned_response = self.clean_repeated_text(response_text)
                
                # Validate response quality
                if len(cleaned_response) < MIN_RESPONSE_LENGTH:
                    st.warning("‚ö†Ô∏è ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞ö‡∞æ‡∞≤‡∞æ ‡∞ö‡∞ø‡∞®‡±ç‡∞®‡∞ó‡∞æ ‡∞â‡∞Ç‡∞¶‡∞ø. ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å...")
                    return None
                
                # Extract and append links
                links = self.extract_links(cleaned_response)
                final_response = cleaned_response + (links if links else "")
                
                return final_response
                
        except Exception as e:
            error_msg = str(e).lower()
            if "quota" in error_msg or "limit" in error_msg:
                return "‚ö†Ô∏è API ‡∞ï‡±ã‡∞ü‡∞æ ‡∞Æ‡∞ø‡∞Ç‡∞ö‡∞ø‡∞™‡±ã‡∞Ø‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞ï‡±ä‡∞Ç‡∞§ ‡∞∏‡±á‡∞™‡±Å ‡∞§‡∞∞‡±ç‡∞µ‡∞æ‡∞§ ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø."
            elif "network" in error_msg or "connection" in error_msg:
                return "‚ö†Ô∏è ‡∞®‡±Ü‡∞ü‡±ç‚Äå‡∞µ‡∞∞‡±ç‡∞ï‡±ç ‡∞≤‡±ã‡∞™‡∞Ç ‡∞∏‡∞Ç‡∞≠‡∞µ‡∞ø‡∞Ç‡∞ö‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞ï‡∞®‡±Ü‡∞ï‡±ç‡∞∑‡∞®‡±ç ‡∞ö‡±Ç‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø."
            else:
                st.error(f"‚ùå ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞µ‡∞ö‡±ç‡∞ö‡±á‡∞ü‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞≤‡±ã‡∞™‡∞Ç: {str(e)}")
                return None
    
    def get_fallback_response(self, question: str) -> Optional[str]:
        """Fallback response using translation if direct Telugu response fails"""
        try:
            # Translate question to English
            translated_query = self.translate_text(question, src='te', dest='en')
            if not translated_query:
                return None
            
            # Get English response
            if not self._model:
                self._model = self.get_model()
                if not self._model:
                    return None
            
            if "chat_session_telugu_fallback" not in st.session_state:
                st.session_state.chat_session_telugu_fallback = self._model.start_chat(history=[])
            
            english_prompt = f"""Answer this question comprehensively in English:
            
            {translated_query}
            
            Provide a detailed response with proper context and examples.
            Include 3-5 reliable reference links from different sources."""
            
            response = st.session_state.chat_session_telugu_fallback.send_message(english_prompt)
            
            if response and response.text:
                # Translate back to Telugu
                telugu_response = self.translate_text(response.text, src='en', dest='te')
                if telugu_response:
                    return self.clean_repeated_text(telugu_response)
            
            return None
            
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Fallback response error: {str(e)}")
            return None
    
    def display_chat_history(self):
        """Display chat history with improved formatting"""
        if "chat_history_telugu" not in st.session_state:
            st.session_state.chat_history_telugu = [
                AIMessage(content="üôè **‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç!** ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡∞ø‡∞®‡∞ø. ‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞≤‡∞®‡±Å ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å‡∞≤‡±ã ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø!")
            ]
        
        for message in st.session_state.chat_history_telugu:
            if isinstance(message, AIMessage):
                with st.chat_message("assistant", avatar="ü§ñ"):
                    st.markdown(message.content)
            elif isinstance(message, HumanMessage):
                with st.chat_message("user", avatar="üë§"):
                    st.markdown(message.content)
    
    def handle_user_input(self):
        """Handle user input with validation and processing"""
        user_query = st.chat_input(
            "üí¨ ‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞®‡±Å ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å‡∞≤‡±ã ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø...", 
            key="telugu_chat_input",
            max_chars=1000
        )
        
        if user_query and user_query.strip():
            # Validate input
            cleaned_query = user_query.strip()
            if len(cleaned_query) < 3:
                st.warning("‚ö†Ô∏è ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ç‡∞§ ‡∞µ‡∞ø‡∞µ‡∞∞‡∞£‡∞æ‡∞§‡±ç‡∞Æ‡∞ï ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞® ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø.")
                return
            
            # Record start time for performance tracking
            start_time = time.time()
            
            # Add user message to history
            st.session_state.chat_history_telugu.append(HumanMessage(content=cleaned_query))
            
            # Display user message
            with st.chat_message("user", avatar="üë§"):
                st.markdown(cleaned_query)
            
            # Generate and display response
            with st.chat_message("assistant", avatar="ü§ñ"):
                # Try direct Telugu response first
                result = self.get_direct_telugu_response(cleaned_query)
                
                # Fallback to translation if direct response fails
                if not result:
                    st.info("üîÑ ‡∞™‡±ç‡∞∞‡∞§‡±ç‡∞Ø‡∞æ‡∞Æ‡±ç‡∞®‡∞æ‡∞Ø ‡∞™‡∞¶‡±ç‡∞ß‡∞§‡∞ø‡∞®‡∞ø ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å...")
                    result = self.get_fallback_response(cleaned_query)
                
                if result:
                    st.markdown(result)
                    st.session_state.chat_history_telugu.append(AIMessage(content=result))
                    
                    # Show performance metrics
                    response_time = time.time() - start_time
                    if response_time > 0:
                        st.sidebar.success(f"‚ö° ‡∞™‡±ç‡∞∞‡∞§‡∞ø‡∞∏‡±ç‡∞™‡∞Ç‡∞¶‡∞® ‡∞∏‡∞Æ‡∞Ø‡∞Ç: {response_time:.2f}s")
                else:
                    error_msg = "üòî ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞á‡∞µ‡±ç‡∞µ‡∞°‡∞Ç‡∞≤‡±ã ‡∞á‡∞¨‡±ç‡∞¨‡∞Ç‡∞¶‡∞ø ‡∞é‡∞¶‡±Å‡∞∞‡∞µ‡±Å‡∞§‡±ã‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞®‡±Å ‡∞Æ‡∞∞‡±ã‡∞µ‡∞ø‡∞ß‡∞Ç‡∞ó‡∞æ ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø ‡∞≤‡±á‡∞¶‡∞æ ‡∞ï‡±ä‡∞Ç‡∞§ ‡∞∏‡±á‡∞™‡±Å ‡∞§‡∞∞‡±ç‡∞µ‡∞æ‡∞§ ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø."
                    st.error(error_msg)
                    st.session_state.chat_history_telugu.append(AIMessage(content=error_msg))
    
    def run_chat_interface(self):
        """Main chat interface"""
        try:
            self.display_chat_history()
            self.handle_user_input()
            
        except Exception as e:
            st.error(f"‚ùå ‡∞ö‡∞æ‡∞ü‡±ç ‡∞á‡∞Ç‡∞ü‡∞∞‡±ç‚Äå‡∞´‡±á‡∞∏‡±ç ‡∞≤‡±ã‡∞™‡∞Ç: {str(e)}")
            st.info("üîÑ ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞™‡±á‡∞ú‡±Ä‡∞®‡∞ø ‡∞∞‡∞ø‡∞´‡±ç‡∞∞‡±Ü‡∞∑‡±ç ‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.")

def main():
    """Main function that respects the st.flag dependency"""
    
    # Check authentication flag
    if not hasattr(st, 'flag') or not st.flag:
        st.error("üîí **‡∞Ø‡∞æ‡∞ï‡±ç‡∞∏‡±Ü‡∞∏‡±ç ‡∞®‡∞ø‡∞∞‡∞æ‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø**: ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞Æ‡∞æ‡∞°‡±ç‡∞Ø‡±Ç‡∞≤‡±ç ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.")
        st.info("üëà ‡∞Æ‡±Ä ‡∞ñ‡∞æ‡∞§‡∞æ‡∞≤‡±ã‡∞ï‡∞ø ‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç ‡∞Ö‡∞µ‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞∏‡±à‡∞°‡±ç‚Äå‡∞¨‡∞æ‡∞∞‡±ç ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.")
        return
    
    # Page configuration
    st.markdown("""
    <style>
    .main-header {
        background: linear-gradient(90deg, #ff6b35 0%, #f7931e 100%);
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
    }
    .main-header h1 {
        color: white;
        margin: 0;
        text-align: center;
        font-family: 'Noto Sans Telugu', sans-serif;
    }
    .chat-container {
        max-height: 600px;
        overflow-y: auto;
    }
    .telugu-text {
        font-family: 'Noto Sans Telugu', sans-serif;
        line-height: 1.6;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï ‡∞ö‡∞æ‡∞ü‡±ç‚Äå‡∞¨‡∞æ‡∞ü‡±ç</h1>
    </div>
    """, unsafe_allow_html=True)
    
    # Initialize and run chatbot
    try:
        chatbot = TeluguChatBot()
        
        
        
        
        # Main chat interface
        chatbot.run_chat_interface()
        
        # Footer
        st.markdown("---")
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.markdown(
                "<p style='text-align: center; color: #666; font-family: \"Noto Sans Telugu\", sans-serif;'>‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞≠‡∞æ‡∞∑ ‡∞Æ‡∞¶‡±ç‡∞¶‡∞§‡±Å ‡∞ï‡±ã‡∞∏‡∞Ç ‚ù§Ô∏è ‡∞§‡±ã ‡∞§‡∞Ø‡∞æ‡∞∞‡±Å ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø</p>", 
                unsafe_allow_html=True
            )
            
    except Exception as e:
        st.error(f"‚ùå **‡∞Ö‡∞™‡±ç‡∞≤‡∞ø‡∞ï‡±á‡∞∑‡∞®‡±ç ‡∞≤‡±ã‡∞™‡∞Ç**: {str(e)}")
        st.info("üîÑ ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞™‡±á‡∞ú‡±Ä‡∞®‡∞ø ‡∞∞‡∞ø‡∞´‡±ç‡∞∞‡±Ü‡∞∑‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø. ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø ‡∞ï‡±ä‡∞®‡∞∏‡∞æ‡∞ó‡∞ø‡∞§‡±á, ‡∞Æ‡∞¶‡±ç‡∞¶‡∞§‡±Å‡∞®‡±Å ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.")

if __name__ == "__main__":
    main()