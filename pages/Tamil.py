import os
import streamlit as st
import google.generativeai as genai
from dotenv import load_dotenv
from langchain_core.messages import AIMessage, HumanMessage
from deep_translator import GoogleTranslator
from functools import lru_cache
import time
import re
from typing import Optional, List
from utils import initialize_session_state, apply_language_styles, save_user_preferences, get_user_preferences

# Constants
MAX_LINKS = 5
RESPONSE_TIMEOUT = 30
MIN_RESPONSE_LENGTH = 80  # Adjusted for Tamil text

class TamilChatBot:
    """Tamil language chatbot with optimized performance and error handling"""
    
    def __init__(self):
        self._model = None
        self._translator_cache = {}
        self._initialize_environment()
    
    def _initialize_environment(self):
        """Initialize environment variables and session state"""
        load_dotenv()
        initialize_session_state()
        apply_language_styles('Tamil')
    
    @staticmethod
    def clean_repeated_text(text: str) -> str:
        """Remove repeated words and phrases from Tamil text"""
        if not text:
            return text
            
        try:
            # Split text into words
            words = text.split()
            # Remove consecutive repeated words
            cleaned_words = []
            for i, word in enumerate(words):
                if i == 0 or word != words[i-1]:
                    cleaned_words.append(word)
            return ' '.join(cleaned_words)
        except Exception:
            return text
    
    @lru_cache(maxsize=32)
    def get_translator(self, src: str, dest: str) -> GoogleTranslator:
        """Get cached translator instance"""
        return GoogleTranslator(source=src, target=dest)
    
    @st.cache_resource
    def get_model_config(_self):
        """Get cached model configuration"""
        return {
            "temperature": 0.1,
            "top_p": 0.8,
            "top_k": 40,
            "max_output_tokens": 1500,  # Increased for better responses
            "stop_sequences": ["---роорпБроЯро┐ро╡рпБ---"]  # Add stop sequence for better control
        }
    
    @st.cache_resource
    def get_model(_self):
        """Get cached model instance with error handling"""
        try:
            genai_api_key = os.getenv("GOOGLE_API_KEY")
            if not genai_api_key:
                raise ValueError("тЭМ Google API key роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. родропро╡рпБроЪрпЖропрпНродрпБ environment variables роР роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН.")
            
            genai.configure(api_key=genai_api_key)
            
            system_instruction = """роирпАроЩрпНроХро│рпН роТро░рпБ роЙродро╡ро┐роХро░рооро╛рой рооро▒рпНро▒рпБроорпН роиройрпНроХрпБ родрооро┐ро┤рпН рокрпЗроЪрпБроорпН AI роЙродро╡ро┐ропро╛ро│ро░рпН.

роХроЯрпБроорпИропро╛рой ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│рпН:
1. роОрокрпНрокрпЛродрпБроорпН роЗропро▓рпНрокро╛рой, роЪро░ро│рооро╛рой родрооро┐ро┤ро┐ро▓рпН роороЯрпНроЯрпБроорпЗ рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН
2. роЪро░ро┐ропро╛рой родрооро┐ро┤рпН роЗро▓роХрпНроХрогроорпН рооро▒рпНро▒рпБроорпН родрпКро┤ро┐ро▓рпНроорпБро▒рпИ роЪрпКро▓рпНро▓роХро░ро╛родро┐ропрпИ рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН
3. ро╡ро┐ро░ро┐ро╡ро╛рой, родроХро╡ро▓рпН роиро┐ро▒рпИроирпНрод рокродро┐ро▓рпНроХро│рпИ ро╡ро┤роЩрпНроХро╡рпБроорпН (роХрпБро▒рпИроирпНродродрпБ 80 ро╡ро╛ро░рпНродрпНродрпИроХро│рпН)
4. родрпЖро│ро┐ро╡ро╛рой рокродрпНродро┐роХро│рпН рооро▒рпНро▒рпБроорпН родро░рпНроХрпНроХро░рпАродро┐ропро╛рой роУроЯрпНроЯродрпНродрпБроЯройрпН рокродро┐ро▓рпИ роЕроорпИроХрпНроХро╡рпБроорпН
5. роорпБроЯро┐роирпНродро╡ро░рпИ родрпБро▓рпНро▓ро┐ропрооро╛рой рооро▒рпНро▒рпБроорпН роироорпНрокроХрооро╛рой родроХро╡ро▓рпНроХро│рпИ ро╡ро┤роЩрпНроХро╡рпБроорпН
6. родро┐ро░рпБроорпНрокродрпН родро┐ро░рпБроорпНрок ро╡ро░рпБроорпН ро╡ро╛роХрпНроХро┐ропроЩрпНроХро│рпН роЕро▓рпНро▓родрпБ роиро┐ро░рокрпНрокрпБ роЙро│рпНро│роЯроХрпНроХродрпНродрпИродрпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН
7. роХрпЗро│рпНро╡ро┐ропро┐ройрпН роЪро┐роХрпНроХро▓ро╛рой родройрпНроорпИроХрпНроХрпБ роПро▒рпНро▒ родрпКройро┐ропрпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН
8. роЙрогрпНроорпИ роЪро╛ро░рпНроирпНрод роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБ роЪрпВро┤ро▓рпН рооро▒рпНро▒рпБроорпН рокро┐ройрпНрокрпБро▓родрпНродрпИ ро╡ро┤роЩрпНроХро╡рпБроорпН
9. родрпЗро╡рпИропро▒рпНро▒ роорпБроЯро┐ро╡рпБ ро╡ро╛ро░рпНродрпНродрпИроХро│рпН роЗро▓рпНро▓ро╛рооро▓рпН роЗропро▓рпНрокро╛роХ рокродро┐ро▓рпИ роорпБроЯро┐роХрпНроХро╡рпБроорпН
10. роорпБро▒рпНро▒ро┐ро▓рпБроорпН роЕро╡роЪро┐ропроорпН роЗро▓рпНро▓ро╛ро╡ро┐роЯрпНроЯро╛ро▓рпН роЖроЩрпНроХро┐ро▓ ро╡ро╛ро░рпНродрпНродрпИроХро│рпИродрпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН
11. рокропройро░рпНроХро│рпИ рооро░ро┐ропро╛родрпИропрпБроЯройрпН (роирпАроЩрпНроХро│рпН) роЙро░рпИропро╛роЯрпБроХ"""

            return genai.GenerativeModel(
                model_name="gemini-2.0-flash",
                generation_config=_self.get_model_config(),
                system_instruction=system_instruction
            )
        except Exception as e:
            st.error(f"тЭМ рооро╛роЯро▓рпН initialization родрпЛро▓рпНро╡ро┐ропроЯрпИроирпНродродрпБ: {str(e)}")
            return None
    
    def translate_text(self, text: str, src: str, dest: str) -> Optional[str]:
        """Optimized translation with caching and error handling"""
        if not text or not text.strip():
            return text
            
        try:
            translator = self.get_translator(src, dest)
            translated = translator.translate(text)
            return self.clean_repeated_text(translated) if translated else None
        except Exception as e:
            st.warning(f"тЪая╕П роорпКро┤ро┐рокрпЖропро░рпНрокрпНрокрпБ рокро┐ро┤рпИ: {str(e)}")
            return None
    
    @lru_cache(maxsize=32)
    def _extract_domain(self, url: str) -> Optional[str]:
        """Extract domain from URL with caching"""
        try:
            domain_match = re.search(r'https?://(?:www\.)?([^/]+)', url)
            return domain_match.group(1) if domain_match else None
        except:
            return None
    
    def extract_links(self, text: str) -> Optional[str]:
        """Extract and format valid URLs from response text"""
        try:
            # Clean existing link sections
            cleaned_text = re.sub(r'\n\n(родрпКроЯро░рпНрокрпБроЯрпИроп|роироорпНрокроХрооро╛рой) роЗрогрпИрокрпНрокрпБроХро│рпН:.*$', '', text, flags=re.DOTALL)
            cleaned_text = re.sub(r'\[([^\]]+)\]\(([^)]+)\)', r'\2', cleaned_text)
            
            # Extract URLs
            url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
            urls = re.findall(url_pattern, cleaned_text)
            
            if not urls:
                return None
            
            # Process and deduplicate URLs
            valid_urls = []
            seen_domains = set()
            
            for url in urls[:MAX_LINKS * 2]:  # Process more to get better selection
                # Clean URL
                clean_url = url.strip('()[].,!?').rstrip('.')
                
                # Validate URL format
                if not re.match(r'https?://[^/]*\.[^/]+', clean_url):
                    continue
                
                domain = self._extract_domain(clean_url)
                if domain and domain not in seen_domains:
                    seen_domains.add(domain)
                    valid_urls.append(clean_url)
                    
                    if len(valid_urls) >= MAX_LINKS:
                        break
            
            if not valid_urls:
                return None
            
            # Format links
            formatted_links = "\n\n---\n\nЁЯФЧ **родрпКроЯро░рпНрокрпБроЯрпИроп роЗрогрпИрокрпНрокрпБроХро│рпН:**\n\n"
            for url in valid_urls:
                domain = self._extract_domain(url)
                if domain:
                    display_name = domain.replace('www.', '')
                    formatted_links += f"тАв [{display_name}]({url})\n"
            
            return formatted_links.rstrip()
            
        except Exception as e:
            st.warning(f"тЪая╕П роЗрогрпИрокрпНрокрпБ рокро┐ро░ро┐родрпНродрпЖроЯрпБроХрпНроХрпБроорпН рокро┐ро┤рпИ: {str(e)}")
            return None
    
    def _create_optimized_prompt(self, question: str) -> str:
        """Create an optimized prompt for better responses"""
        return f"""роЗроирпНрод роХрпЗро│рпНро╡ро┐роХрпНроХрпБ родрооро┐ро┤ро┐ро▓рпН ро╡ро┐ро░ро┐ро╡ро╛роХ рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН:

{question}

родрпЗро╡рпИроХро│рпН:
- ро╡ро┐ро░ро┐ро╡ро╛рой, роиройрпНроХрпБ роЕроорпИроХрпНроХрокрпНрокроЯрпНроЯ рокродро┐ро▓рпИ ро╡ро┤роЩрпНроХро╡рпБроорпН (роХрпБро▒рпИроирпНродродрпБ 80 ро╡ро╛ро░рпНродрпНродрпИроХро│рпН)
- родрпЖро│ро┐ро╡ро╛рой рокродрпНродро┐роХро│рпН рооро▒рпНро▒рпБроорпН родро░рпНроХрпНроХро░рпАродро┐ропро╛рой роУроЯрпНроЯродрпНродрпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН
- родрпКроЯро░рпНрокрпБроЯрпИроп роЪрпВро┤ро▓рпН рооро▒рпНро▒рпБроорпН рокро┐ройрпНрокрпБро▓ родроХро╡ро▓рпНроХро│рпИ роЪрпЗро░рпНроХрпНроХро╡рпБроорпН
- родрпЗро╡рпИропро╛рой роЗроЯроЩрпНроХро│ро┐ро▓рпН роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роЙрогрпНроорпИроХро│рпН рооро▒рпНро▒рпБроорпН роЙрджро╛ро░рогроЩрпНроХро│рпИ роорпЗро▒рпНроХрпЛро│рпН роХро╛роЯрпНроЯро╡рпБроорпН
- родрпКро┤ро┐ро▓рпНроорпБро▒рпИ роЖройро╛ро▓рпН роЙро░рпИропро╛роЯро▓рпН родрпКройро┐ропрпИ рокро░ро╛рооро░ро┐роХрпНроХро╡рпБроорпН
- родрпБро▓рпНро▓ро┐ропроорпН рооро▒рпНро▒рпБроорпН роЙродро╡ро┐роХро░рооро╛рой родройрпНроорпИропро┐ро▓рпН роХро╡ройроорпН роЪрпЖро▓рпБродрпНродро╡рпБроорпН

рокро▓рпНро╡рпЗро▒рпБ роЕродро┐роХро╛ро░рокрпВро░рпНро╡ роЖродро╛ро░роЩрпНроХро│ро┐ро▓ро┐ро░рпБроирпНродрпБ (роХро▓рпНро╡ро┐, роЕро░роЪрпБ, роЪрпЖропрпНродро┐, роЖро░ро╛ропрпНроЪрпНроЪро┐ роиро┐ро▒рпБро╡ройроЩрпНроХро│рпН) 3-5 роироорпНрокроХрооро╛рой роХрпБро▒ро┐рокрпНрокрпБ роЗрогрпИрокрпНрокрпБроХро│рпИ ро╡ро┤роЩрпНроХро╡рпБроорпН.
роЙроЩрпНроХро│рпН рокродро┐ро▓ро┐ройрпН роЗро▒рпБродро┐ропро┐ро▓рпН роЗрогрпИрокрпНрокрпБроХро│рпИ роОро│ро┐роп URL роХро│ро╛роХ ро╡роЯро┐ро╡роорпИроХрпНроХро╡рпБроорпН."""
    
    def get_response(self, question: str) -> Optional[str]:
        """Get response from the model with error handling and optimization"""
        try:
            if not self._model:
                self._model = self.get_model()
                if not self._model:
                    return None
            
            # Initialize chat session if needed
            if "chat_session_tamil" not in st.session_state:
                st.session_state.chat_session_tamil = self._model.start_chat(history=[])
            
            # Create optimized prompt
            prompt = self._create_optimized_prompt(question)
            
            # Get response with timeout handling
            with st.spinner("ЁЯдФ роЪро┐роирпНродро┐родрпНродрпБроХрпНроХрпКрогрпНроЯро┐ро░рпБроХрпНроХро┐ро▒рпЗройрпН..."):
                response = st.session_state.chat_session_tamil.send_message(prompt)
                
                if not response or not response.text:
                    return "тЪая╕П роОройроХрпНроХрпБ ро╡рпЖро▒рпНро▒рпБ рокродро┐ро▓рпН роХро┐роЯрпИродрпНродродрпБ. родропро╡рпБроЪрпЖропрпНродрпБ роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ропрпИ ро╡рпЗро▒рпБро╡ро┐родрооро╛роХроХрпН роХрпЗроЯрпНроХ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН."
                
                response_text = response.text.strip()
                cleaned_response = self.clean_repeated_text(response_text)
                
                # Validate response quality
                if len(cleaned_response) < MIN_RESPONSE_LENGTH:
                    st.warning("тЪая╕П рокродро┐ро▓рпН рооро┐роХроХрпН роХрпБро▒рпБроХро┐ропродро╛роХродрпН родрпЛройрпНро▒рпБроХро┐ро▒родрпБ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐родрпНродрпБроХрпНроХрпКрогрпНроЯро┐ро░рпБроХрпНроХро┐ро▒рпЗройрпН...")
                    return None
                
                # Extract and append links
                links = self.extract_links(cleaned_response)
                final_response = cleaned_response + (links if links else "")
                
                return final_response
                
        except Exception as e:
            error_msg = str(e).lower()
            if "quota" in error_msg or "limit" in error_msg:
                return "тЪая╕П API quota роорпБроЯро┐роирпНродрпБро╡ро┐роЯрпНроЯродрпБ. родропро╡рпБроЪрпЖропрпНродрпБ рокро┐ройрпНройро░рпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН."
            elif "network" in error_msg or "connection" in error_msg:
                return "тЪая╕П роирпЖроЯрпНро╡рпКро░рпНроХрпН рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ. родропро╡рпБроЪрпЖропрпНродрпБ роЙроЩрпНроХро│рпН роЗрогрпИрокрпНрокрпИроЪрпН роЪро░ро┐рокро╛ро░рпНродрпНродрпБ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН."
            else:
                st.error(f"тЭМ рокродро┐ро▓рпН роЙро░рпБро╡ро╛роХрпНроХрпБро╡родро┐ро▓рпН рокро┐ро┤рпИ: {str(e)}")
                return None
    
    def get_direct_tamil_response(self, question: str) -> Optional[str]:
        """Get response directly in Tamil without translation"""
        try:
            if not self._model:
                self._model = self.get_model()
                if not self._model:
                    return None
            
            # Initialize chat session if needed
            if "chat_session_tamil" not in st.session_state:
                st.session_state.chat_session_tamil = self._model.start_chat(history=[])
            
            prompt_template = f"""
роХрпЗро│рпНро╡ро┐: {question}

рокродро┐ро▓рпН родро░рпБроорпНрокрпЛродрпБ роХрпАро┤рпНроХрогрпНроЯ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│рпИрокрпН рокро┐ройрпНрокро▒рпНро▒ро╡рпБроорпН:
1. родрпЖро│ро┐ро╡ро╛рой, роЪро░ро┐ропро╛рой родрооро┐ро┤ро┐ро▓рпН рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН
2. родрпЗро╡рпИропро╛рой ро╡ро┐ро╡ро░роЩрпНроХро│рпИ ро╡ро┐ро░ро┐ро╡ро╛роХ ро╡ро┐ро│роХрпНроХро╡рпБроорпН (роХрпБро▒рпИроирпНродродрпБ 80 ро╡ро╛ро░рпНродрпНродрпИроХро│рпН)
3. родрооро┐ро┤рпН роЗро▓роХрпНроХрог ро╡ро┐родро┐роХро│рпИроХрпН роХроЯрпИрокрпНрокро┐роЯро┐роХрпНроХро╡рпБроорпН
4. роорпАрогрпНроЯрпБроорпН роорпАрогрпНроЯрпБроорпН ро╡ро╛ро░рпНродрпНродрпИроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНрод ро╡рпЗрогрпНроЯро╛роорпН
5. рокродро┐ро▓рпИ роорпБро┤рпБроорпИропро╛рой ро╡ро╛роХрпНроХро┐ропроЩрпНроХро│ро┐ро▓рпН роЕро│ро┐роХрпНроХро╡рпБроорпН
6. ро╡рпЖро╡рпНро╡рпЗро▒рпБ ро╡ро▓рпИродрпНродро│роЩрпНроХро│ро┐ро▓ро┐ро░рпБроирпНродрпБ 4-5 роироорпНрокроХрооро╛рой роЗрогрпИрокрпНрокрпБроХро│рпИ ро╡ро┤роЩрпНроХро╡рпБроорпН (роТро░рпБ ро╡ро▓рпИродрпНродро│родрпНродро┐ро▓ро┐ро░рпБроирпНродрпБ роТройрпНро▒рпБроХрпНроХрпБ роорпЗро▒рпНрокроЯрпНроЯ роЗрогрпИрокрпНрокрпБроХро│рпИ ро╡ро┤роЩрпНроХ ро╡рпЗрогрпНроЯро╛роорпН)
7. роЗрогрпИрокрпНрокрпБроХро│рпН рокро▓рпНро╡рпЗро▒рпБ ро╡роХрпИропро╛рой роорпВро▓роЩрпНроХро│ро┐ро▓ро┐ро░рпБроирпНродрпБ роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН (роО.роХро╛: роЪрпЖропрпНродро┐роХро│рпН, роХро▓рпНро╡ро┐, роЕро░роЪрпБ, роЖро░ро╛ропрпНроЪрпНроЪро┐ роорпБродро▓ро┐ропрой)
8. роЗрогрпИрокрпНрокрпБроХро│ро┐ройрпН ро╡ро┐ро│роХрпНроХроЩрпНроХро│рпИроХрпН роХрпКроЯрпБроХрпНроХ ро╡рпЗрогрпНроЯро╛роорпН, URL роороЯрпНроЯрпБроорпН роХрпКроЯрпБроХрпНроХро╡рпБроорпН
"""
            
            response = st.session_state.chat_session_tamil.send_message(prompt_template)
            cleaned_response = self.clean_repeated_text(response.text)
            
            # Extract and append links if available
            links = self.extract_links(cleaned_response)
            if links:
                cleaned_response += links
            
            return cleaned_response
            
        except Exception as e:
            st.warning(f"Direct Tamil response error: {str(e)}")
            return None
    
    def display_chat_history(self):
        """Display chat history with improved formatting"""
        if "chat_history_tamil" not in st.session_state:
            st.session_state.chat_history_tamil = [
                AIMessage(content="ЁЯСЛ **ро╡рогроХрпНроХроорпН!** роиро╛ройрпН роЙроЩрпНроХро│рпН родрооро┐ро┤рпН роЙродро╡ро┐ропро╛ро│ро░рпН. роОродрпИропрпБроорпН роХрпЗроЯрпНроХ родропроЩрпНроХро╛родрпАро░рпНроХро│рпН!")
            ]
        
        for message in st.session_state.chat_history_tamil:
            if isinstance(message, AIMessage):
                with st.chat_message("assistant", avatar="ЁЯдЦ"):
                    st.markdown(message.content)
            elif isinstance(message, HumanMessage):
                with st.chat_message("user", avatar="ЁЯСд"):
                    st.markdown(message.content)
    
    def handle_user_input(self):
        """Handle user input with validation and processing"""
        user_query = st.chat_input(
            "ЁЯТм роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ропрпИ родрооро┐ро┤ро┐ро▓рпН роЗроЩрпНроХрпЗ роЯрпИрокрпН роЪрпЖропрпНропрпБроЩрпНроХро│рпН...", 
            key="tamil_chat_input",
            max_chars=1000
        )
        
        if user_query and user_query.strip():
            # Validate input
            cleaned_query = user_query.strip()
            if len(cleaned_query) < 3:
                st.warning("тЪая╕П родропро╡рпБроЪрпЖропрпНродрпБ роорпЗро▓рпБроорпН ро╡ро┐ро░ро┐ро╡ро╛рой роХрпЗро│рпНро╡ро┐ роХрпЗро│рпБроЩрпНроХро│рпН.")
                return
            
            # Record start time for performance tracking
            start_time = time.time()
            
            # Add user message to history
            st.session_state.chat_history_tamil.append(HumanMessage(content=cleaned_query))
            
            # Display user message
            with st.chat_message("user", avatar="ЁЯСд"):
                st.markdown(cleaned_query)
            
            # Generate and display response
            with st.chat_message("assistant", avatar="ЁЯдЦ"):
                try:
                    # Try direct Tamil response first
                    result = self.get_direct_tamil_response(cleaned_query)
                    
                    if not result:
                        # Fallback to translation if direct response fails
                        translated_query = self.translate_text(cleaned_query, 'ta', 'en')
                        if translated_query:
                            result = self.get_response(translated_query)
                            if result:
                                result = self.translate_text(result, 'en', 'ta')
                    
                    if result:
                        st.markdown(result)
                        st.session_state.chat_history_tamil.append(AIMessage(content=result))
                        
                        # Show performance metrics
                        response_time = time.time() - start_time
                        if response_time > 0:
                            st.sidebar.success(f"тЪб рокродро┐ро▓рпН роирпЗро░роорпН: {response_time:.2f}s")
                    else:
                        error_msg = "ЁЯШФ роОройроХрпНроХрпБ рокродро┐ро▓рпН роЙро░рпБро╡ро╛роХрпНроХрпБро╡родро┐ро▓рпН роЪро┐роХрпНроХро▓рпН роЙро│рпНро│родрпБ. родропро╡рпБроЪрпЖропрпНродрпБ роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ропрпИ ро╡рпЗро▒рпБро╡ро┐родрооро╛роХроХрпН роХрпЗроЯрпНроХро╡рпБроорпН роЕро▓рпНро▓родрпБ рокро┐ройрпНройро░рпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН."
                        st.error(error_msg)
                        st.session_state.chat_history_tamil.append(AIMessage(content=error_msg))
                        
                except Exception as e:
                    error_msg = f"Error: {str(e)}"
                    st.warning(error_msg)
                    st.session_state.chat_history_tamil.append(AIMessage(content=error_msg))
    
    def run_chat_interface(self):
        """Main chat interface"""
        try:
            self.display_chat_history()
            self.handle_user_input()
            
        except Exception as e:
            st.error(f"тЭМ роЕро░роЯрпНроЯрпИ роЗроЯрпИроорпБроХрокрпН рокро┐ро┤рпИ: {str(e)}")
            st.info("ЁЯФД родропро╡рпБроЪрпЖропрпНродрпБ рокроХрпНроХродрпНродрпИ рокрпБродрпБрокрпНрокро┐родрпНродрпБ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.")

def main():
    """Main function that respects the st.flag dependency"""
    
    # Check authentication flag
    if not hasattr(st, 'flag') or not st.flag:
        st.error("ЁЯФТ **роЕрогрпБроХро▓рпН рооро▒рпБроХрпНроХрокрпНрокроЯрпНроЯродрпБ**: родрооро┐ро┤рпН родрпКроХрпБродро┐ропрпИрокрпН рокропройрпНрокроЯрпБродрпНрод родропро╡рпБроЪрпЖропрпНродрпБ роЙро│рпНроирпБро┤рпИропро╡рпБроорпН.")
        st.info("ЁЯСИ роЙроЩрпНроХро│рпН роХрогроХрпНроХро┐ро▓рпН роЙро│рпНроирпБро┤рпИроп рокроХрпНроХрокрпНрокроЯрпНроЯро┐ропрпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН.")
        return
    
    # Page configuration
    st.markdown("""
    <style>
    .main-header {
        background: linear-gradient(90deg, #1e3c72 0%, #2a5298 100%);
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
    }
    .main-header h1 {
        color: white;
        margin: 0;
        text-align: center;
    }
    .chat-container {
        max-height: 600px;
        overflow-y: auto;
    }
    .tamil-text {
        font-family: 'Noto Sans Tamil', 'Latha', 'Vijaya', sans-serif;
        line-height: 1.6;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>роЙродро╡ро┐ропро╛ро│ро░рпН родрооро┐ро┤рпН роЪро╛роЯрпНтАМрокро╛роЯрпН</h1>
    </div>
    """, unsafe_allow_html=True)
    
    # Initialize and run chatbot
    try:
        chatbot = TamilChatBot()
        
        
        # Main chat interface
        chatbot.run_chat_interface()
        
        # Footer
        st.markdown("---")
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.markdown(
                "<p style='text-align: center; color: #666;' class='tamil-text'>родрооро┐ро┤рпН роорпКро┤ро┐ роЖродро░ро╡рпБроХрпНроХро╛роХ тЭдя╕П роЙроЯройрпН роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯродрпБ</p>", 
                unsafe_allow_html=True
            )
            
    except Exception as e:
        st.error(f"тЭМ **рокропройрпНрокро╛роЯрпНроЯрпБрокрпН рокро┐ро┤рпИ**: {str(e)}")
        st.info("ЁЯФД родропро╡рпБроЪрпЖропрпНродрпБ рокроХрпНроХродрпНродрпИ рокрпБродрпБрокрпНрокро┐роХрпНроХро╡рпБроорпН. рокро┐ро░роЪрпНроЪройрпИ родрпКроЯро░рпНроирпНродро╛ро▓рпН, роЖродро░ро╡рпИродрпН родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│ро╡рпБроорпН.")

if __name__ == "__main__":
    main()